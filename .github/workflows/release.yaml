name: Tag & Release

on:
  workflow_dispatch:
    inputs:
      version:
        description: Version
        required: false

jobs:
  tag:
    runs-on: ubuntu-latest
    # Only release from main branch
    if: github.repository == 'adobe/aio-lib-java-cloudmanager' && github.ref == 'refs/heads/main'

    outputs:
      version: ${{ steps.store-version.outputs.version }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup JDK
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: 11
          cache: maven

      - name: Initialize mandatory git config
        run: |
          git config user.name "GitHub Actions"
          git config user.email noreply@github.com

      - name: Release with Maven
        run: mvn -B release:clean release:prepare -DreleaseVersion=${{ github.event.inputs.version }}

      - name: Store Version
        id: store-version
        run: echo "::set-output name=version::$(grep ^scm.tag= release.properties | sed -e 's/scm.tag=aio-lib-cloudmanager-//g')"

  github-release:
    needs: tag
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0 # Work around for https://github.com/heinrichreimer/action-github-changelog-generator/issues/21
          ref: aio-lib-cloudmanager-${{ needs.tag.outputs.version }}

      - name: Setup JDK
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: 11
          cache: maven

      - name: Maven Verify
        run: mvn -U clean verify -Pjava8 && mvn verify

      - name: Generate Release Changelog
        id: generate-release-changelog
        uses: heinrichreimer/github-changelog-generator-action@v2.3
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          breakingLabel: '### üí• Breaking'
          enhancementLabel: '### üöÄ Enhancements'
          bugsLabel: '### üêõ Bug fixes'
          securityLabel: '### üõ°Ô∏è Security'
          issuesLabel: '### üìÅ Other issues'
          prLabel: '### üìÅ Other pull requests'
          addSections: '{"documentation":{"prefix":"### üìñ Documentation","labels":["documentation"]},"tests":{"prefix":"### ‚úÖ Testing","labels":["tests"]}}'
          issues: false
          issuesWoLabels: false
          pullRequests: true
          prWoLabels: true
          author: true
          compareLink: true
          onlyLastTag: true
          stripHeaders: true
          stripGeneratorNotice: true

      - name: Create Release
        id: create-release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: aio-lib-cloudmanager-${{ needs.tag.outputs.version }}
          release_name: aio-lib-cloudmanager-${{ needs.tag.outputs.version }}
          body: ${{ steps.generate-release-changelog.outputs.changelog }}
          draft: false
          prerelease: false

      - name: Upload Release Artifacts
        id: upload-release-artifacts
        uses: softprops/action-gh-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: aio-lib-cloudmanager-${{ needs.tag.outputs.version }}
          files: |
            ./target/aio-lib-cloudmanager-*.jar

  maven-central-deploy:
    needs: tag
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          ref: aio-lib-cloudmanager-${{ needs.tag.outputs.version }}

      - name: Setup JDK
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: 11
          cache: maven
          server-id: ossrh
          server-username: MAVEN_USERNAME
          server-password: MAVEN_CENTRAL_TOKEN
          gpg-private-key: ${{ secrets.MAVEN_GPG_PRIVATE_KEY }}
          gpg-passphrase: MAVEN_GPG_PASSPHRASE

      - name: Import GPG key
        env:
          GPG_SECRET_KEYS: ${{ secrets.GPG_SECRET_KEYS }}
          GPG_OWNERTRUST: ${{ secrets.GPG_OWNERTRUST }}
        run: |
          echo $GPG_SECRET_KEYS | base64 --decode | gpg --import --no-tty --batch --yes
          echo $GPG_OWNERTRUST | base64 --decode | gpg --import-ownertrust --no-tty --batch --yes

      - name: Java8 Build
        run: mvn clean deploy -DskipremoteStaging=true -Dmaven.test.skip -Prelease,java8 
        env:
          MAVEN_USERNAME: ${{ secrets.SONATYPE_USERNAME }}
          MAVEN_CENTRAL_TOKEN: ${{ secrets.SONATYPE_PASSWORD }}
          MAVEN_GPG_PASSPHRASE: ${{ secrets.GPG_PASSPHRASE }}

      - name: Java11 Build
        run: mvn clean deploy -DskipRemoteStaging=true -Dmaven.test.skip -Prelease,attach-javadoc,attach-source
        env:
          MAVEN_USERNAME: ${{ secrets.SONATYPE_USERNAME }}
          MAVEN_CENTRAL_TOKEN: ${{ secrets.SONATYPE_PASSWORD }}
          MAVEN_GPG_PASSPHRASE: ${{ secrets.GPG_PASSPHRASE }}

      - name: Deploy to Central
        run: mvn nexus-staging:deploy-staged -DautoReleaseAfterClose=true
        env:
          MAVEN_USERNAME: ${{ secrets.SONATYPE_USERNAME }}
          MAVEN_CENTRAL_TOKEN: ${{ secrets.SONATYPE_PASSWORD }}
          MAVEN_GPG_PASSPHRASE: ${{ secrets.GPG_PASSPHRASE }}
