/*
 * Cloud Manager API
 * This API allows access to Cloud Manager programs, pipelines, and environments by an authorized technical account created through the Adobe I/O Console. The base url for this API is https://cloudmanager.adobe.io, e.g. to get the list of programs for an organization, you would make a GET request to https://cloudmanager.adobe.io/api/programs (with the correct set of headers as described below). This swagger file can be downloaded from https://raw.githubusercontent.com/AdobeDocs/cloudmanager-api-docs/main/swagger-specs/api.yaml.
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.adobe.aio.cloudmanager.impl.model;

/*-
 * #%L
 * Adobe Cloud Manager Client Library
 * %%
 * Copyright (C) 2020 - 2022 Adobe Inc.
 * %%
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * #L%
 */

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.Serializable;
/**
 * Description of a domain name to create
 */
@Schema(description = "Description of a domain name to create")

public class NewDomainName implements Serializable{
  private static final long serialVersionUID = 1L;
  @JsonProperty("name")
  private String name = null;

  @JsonProperty("environmentId")
  private Long environmentId = null;

  @JsonProperty("certificateId")
  private Long certificateId = null;

  @JsonProperty("dnsTxtRecord")
  private String dnsTxtRecord = null;

  @JsonProperty("dnsZone")
  private String dnsZone = null;

  public NewDomainName name(String name) {
    this.name = name;
    return this;
  }

   /**
   * Name of the domain name
   * @return name
  **/
  @Schema(example = "customer.domain.com", required = true, description = "Name of the domain name")
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }

  public NewDomainName environmentId(Long environmentId) {
    this.environmentId = environmentId;
    return this;
  }

   /**
   * The environment id
   * @return environmentId
  **/
  @Schema(required = true, description = "The environment id")
  public Long getEnvironmentId() {
    return environmentId;
  }

  public void setEnvironmentId(Long environmentId) {
    this.environmentId = environmentId;
  }

  public NewDomainName certificateId(Long certificateId) {
    this.certificateId = certificateId;
    return this;
  }

   /**
   * The certificate id
   * @return certificateId
  **/
  @Schema(required = true, description = "The certificate id")
  public Long getCertificateId() {
    return certificateId;
  }

  public void setCertificateId(Long certificateId) {
    this.certificateId = certificateId;
  }

  public NewDomainName dnsTxtRecord(String dnsTxtRecord) {
    this.dnsTxtRecord = dnsTxtRecord;
    return this;
  }

   /**
   * DNS TXT record. Must match the corresponding record returned from the validate request.
   * @return dnsTxtRecord
  **/
  @Schema(example = "adobe-aem-verification=www.adobe.com/1/2/ab-cd-ef", required = true, description = "DNS TXT record. Must match the corresponding record returned from the validate request.")
  public String getDnsTxtRecord() {
    return dnsTxtRecord;
  }

  public void setDnsTxtRecord(String dnsTxtRecord) {
    this.dnsTxtRecord = dnsTxtRecord;
  }

  public NewDomainName dnsZone(String dnsZone) {
    this.dnsZone = dnsZone;
    return this;
  }

   /**
   * Name of the DNS zone. Must match the corresponding value returned from the validate request.
   * @return dnsZone
  **/
  @Schema(example = "adobe.com.", required = true, description = "Name of the DNS zone. Must match the corresponding value returned from the validate request.")
  public String getDnsZone() {
    return dnsZone;
  }

  public void setDnsZone(String dnsZone) {
    this.dnsZone = dnsZone;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    NewDomainName newDomainName = (NewDomainName) o;
    return Objects.equals(this.name, newDomainName.name) &&
        Objects.equals(this.environmentId, newDomainName.environmentId) &&
        Objects.equals(this.certificateId, newDomainName.certificateId) &&
        Objects.equals(this.dnsTxtRecord, newDomainName.dnsTxtRecord) &&
        Objects.equals(this.dnsZone, newDomainName.dnsZone);
  }

  @Override
  public int hashCode() {
    return Objects.hash(name, environmentId, certificateId, dnsTxtRecord, dnsZone);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class NewDomainName {\n");
    
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    environmentId: ").append(toIndentedString(environmentId)).append("\n");
    sb.append("    certificateId: ").append(toIndentedString(certificateId)).append("\n");
    sb.append("    dnsTxtRecord: ").append(toIndentedString(dnsTxtRecord)).append("\n");
    sb.append("    dnsZone: ").append(toIndentedString(dnsZone)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
