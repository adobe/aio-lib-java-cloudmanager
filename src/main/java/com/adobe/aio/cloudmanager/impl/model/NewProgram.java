/*
 * Cloud Manager API
 * This API allows access to Cloud Manager programs, pipelines, and environments by an authorized technical account created through the Adobe I/O Console. The base url for this API is https://cloudmanager.adobe.io, e.g. to get the list of programs for an organization, you would make a GET request to https://cloudmanager.adobe.io/api/programs (with the correct set of headers as described below). This swagger file can be downloaded from https://raw.githubusercontent.com/AdobeDocs/cloudmanager-api-docs/main/swagger-specs/api.yaml.
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.adobe.aio.cloudmanager.impl.model;

/*-
 * #%L
 * Adobe Cloud Manager Client Library
 * %%
 * Copyright (C) 2020 - 2022 Adobe Inc.
 * %%
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * #L%
 */

import java.util.Objects;
import java.util.Arrays;
import com.adobe.aio.cloudmanager.impl.model.ProgramCapabilities;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.v3.oas.annotations.media.Schema;
import java.util.ArrayList;
import java.util.List;
import java.io.Serializable;
/**
 * Description of a new program to be created
 */
@Schema(description = "Description of a new program to be created")

public class NewProgram implements Serializable{
  private static final long serialVersionUID = 1L;
  @JsonProperty("name")
  private String name = null;

  /**
   * Gets or Sets type
   */
  public enum TypeEnum {
    SERVICE("aem_cloud_service");

    private String value;

    TypeEnum(String value) {
      this.value = value;
    }
    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    @JsonCreator
    public static TypeEnum fromValue(String text) {
      for (TypeEnum b : TypeEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

  }  @JsonProperty("type")
  private TypeEnum type = null;

  @JsonProperty("capabilities")
  private ProgramCapabilities capabilities = null;

  /**
   * Gets or Sets solutionNames
   */
  public enum SolutionNamesEnum {
    AEMSITES("aemsites"),
    AEMASSETS("aemassets");

    private String value;

    SolutionNamesEnum(String value) {
      this.value = value;
    }
    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    @JsonCreator
    public static SolutionNamesEnum fromValue(String text) {
      for (SolutionNamesEnum b : SolutionNamesEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

  }  @JsonProperty("solutionNames")
  private List<SolutionNamesEnum> solutionNames = null;

  public NewProgram name(String name) {
    this.name = name;
    return this;
  }

   /**
   * New program name
   * @return name
  **/
  @Schema(required = true, description = "New program name")
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }

  public NewProgram type(TypeEnum type) {
    this.type = type;
    return this;
  }

   /**
   * Get type
   * @return type
  **/
  @Schema(required = true, description = "")
  public TypeEnum getType() {
    return type;
  }

  public void setType(TypeEnum type) {
    this.type = type;
  }

  public NewProgram capabilities(ProgramCapabilities capabilities) {
    this.capabilities = capabilities;
    return this;
  }

   /**
   * Get capabilities
   * @return capabilities
  **/
  @Schema(description = "")
  public ProgramCapabilities getCapabilities() {
    return capabilities;
  }

  public void setCapabilities(ProgramCapabilities capabilities) {
    this.capabilities = capabilities;
  }

  public NewProgram solutionNames(List<SolutionNamesEnum> solutionNames) {
    this.solutionNames = solutionNames;
    return this;
  }

  public NewProgram addSolutionNamesItem(SolutionNamesEnum solutionNamesItem) {
    if (this.solutionNames == null) {
      this.solutionNames = new ArrayList<>();
    }
    this.solutionNames.add(solutionNamesItem);
    return this;
  }

   /**
   * List of solutions to be enabled on the new program.
   * @return solutionNames
  **/
  @Schema(description = "List of solutions to be enabled on the new program.")
  public List<SolutionNamesEnum> getSolutionNames() {
    return solutionNames;
  }

  public void setSolutionNames(List<SolutionNamesEnum> solutionNames) {
    this.solutionNames = solutionNames;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    NewProgram newProgram = (NewProgram) o;
    return Objects.equals(this.name, newProgram.name) &&
        Objects.equals(this.type, newProgram.type) &&
        Objects.equals(this.capabilities, newProgram.capabilities) &&
        Objects.equals(this.solutionNames, newProgram.solutionNames);
  }

  @Override
  public int hashCode() {
    return Objects.hash(name, type, capabilities, solutionNames);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class NewProgram {\n");
    
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    capabilities: ").append(toIndentedString(capabilities)).append("\n");
    sb.append("    solutionNames: ").append(toIndentedString(solutionNames)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
