/*
 * Cloud Manager API
 * This API allows access to Cloud Manager programs, pipelines, and environments by an authorized technical account created through the Adobe I/O Console. The base url for this API is https://cloudmanager.adobe.io, e.g. to get the list of programs for an organization, you would make a GET request to https://cloudmanager.adobe.io/api/programs (with the correct set of headers as described below). This swagger file can be downloaded from https://raw.githubusercontent.com/AdobeDocs/cloudmanager-api-docs/main/swagger-specs/api.yaml.
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.adobe.aio.cloudmanager.impl.model;

/*-
 * #%L
 * Adobe Cloud Manager Client Library
 * %%
 * Copyright (C) 2020 - 2022 Adobe Inc.
 * %%
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * #L%
 */

import java.util.Objects;
import java.util.Arrays;
import com.adobe.aio.cloudmanager.impl.model.PipelineStep;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.v3.oas.annotations.media.Schema;
import java.util.ArrayList;
import java.util.List;
import java.io.Serializable;
/**
 * Describes a phase of a pipeline
 */
@Schema(description = "Describes a phase of a pipeline")

public class PipelinePhase implements Serializable{
  private static final long serialVersionUID = 1L;
  @JsonProperty("name")
  private String name = null;

  /**
   * Type of the phase
   */
  public enum TypeEnum {
    VALIDATE("VALIDATE"),
    BUILD("BUILD"),
    DEPLOY("DEPLOY");

    private String value;

    TypeEnum(String value) {
      this.value = value;
    }
    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    @JsonCreator
    public static TypeEnum fromValue(String text) {
      for (TypeEnum b : TypeEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

  }  @JsonProperty("type")
  private TypeEnum type = null;

  @JsonProperty("repositoryId")
  private String repositoryId = null;

  @JsonProperty("branch")
  private String branch = null;

  @JsonProperty("environmentId")
  private String environmentId = null;

  /**
   * Type of environment (for example stage or prod, readOnly &#x3D; true)
   */
  public enum EnvironmentTypeEnum {
    DEV("dev"),
    STAGE("stage"),
    PROD("prod");

    private String value;

    EnvironmentTypeEnum(String value) {
      this.value = value;
    }
    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    @JsonCreator
    public static EnvironmentTypeEnum fromValue(String text) {
      for (EnvironmentTypeEnum b : EnvironmentTypeEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

  }  @JsonProperty("environmentType")
  private EnvironmentTypeEnum environmentType = null;

  @JsonProperty("steps")
  private List<PipelineStep> steps = null;

  public PipelinePhase name(String name) {
    this.name = name;
    return this;
  }

   /**
   * Name of the phase
   * @return name
  **/
  @Schema(example = "DEV Build", description = "Name of the phase")
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }

  public PipelinePhase type(TypeEnum type) {
    this.type = type;
    return this;
  }

   /**
   * Type of the phase
   * @return type
  **/
  @Schema(example = "DEPLOY", required = true, description = "Type of the phase")
  public TypeEnum getType() {
    return type;
  }

  public void setType(TypeEnum type) {
    this.type = type;
  }

  public PipelinePhase repositoryId(String repositoryId) {
    this.repositoryId = repositoryId;
    return this;
  }

   /**
   * Identifier of the source repository. The code from this repository will be build at the start of this phase.  Mandatory if type&#x3D;BUILD
   * @return repositoryId
  **/
  @Schema(description = "Identifier of the source repository. The code from this repository will be build at the start of this phase.  Mandatory if type=BUILD")
  public String getRepositoryId() {
    return repositoryId;
  }

  public void setRepositoryId(String repositoryId) {
    this.repositoryId = repositoryId;
  }

  public PipelinePhase branch(String branch) {
    this.branch = branch;
    return this;
  }

   /**
   * Name of the tracked branch or a fully qualified git tag (e.g. refs/tags/v1).   Assumed to be &#x60;master&#x60; if missing.
   * @return branch
  **/
  @Schema(description = "Name of the tracked branch or a fully qualified git tag (e.g. refs/tags/v1).   Assumed to be `master` if missing.")
  public String getBranch() {
    return branch;
  }

  public void setBranch(String branch) {
    this.branch = branch;
  }

  public PipelinePhase environmentId(String environmentId) {
    this.environmentId = environmentId;
    return this;
  }

   /**
   * Identifier of the target environment. Mandatory if type&#x3D;DEPLOY
   * @return environmentId
  **/
  @Schema(description = "Identifier of the target environment. Mandatory if type=DEPLOY")
  public String getEnvironmentId() {
    return environmentId;
  }

  public void setEnvironmentId(String environmentId) {
    this.environmentId = environmentId;
  }

  public PipelinePhase environmentType(EnvironmentTypeEnum environmentType) {
    this.environmentType = environmentType;
    return this;
  }

   /**
   * Type of environment (for example stage or prod, readOnly &#x3D; true)
   * @return environmentType
  **/
  @Schema(description = "Type of environment (for example stage or prod, readOnly = true)")
  public EnvironmentTypeEnum getEnvironmentType() {
    return environmentType;
  }

  public void setEnvironmentType(EnvironmentTypeEnum environmentType) {
    this.environmentType = environmentType;
  }

  public PipelinePhase steps(List<PipelineStep> steps) {
    this.steps = steps;
    return this;
  }

  public PipelinePhase addStepsItem(PipelineStep stepsItem) {
    if (this.steps == null) {
      this.steps = new ArrayList<>();
    }
    this.steps.add(stepsItem);
    return this;
  }

   /**
   * Steps to be included in the phase in execution order. Might be added or not, depending on permissions or configuration
   * @return steps
  **/
  @Schema(description = "Steps to be included in the phase in execution order. Might be added or not, depending on permissions or configuration")
  public List<PipelineStep> getSteps() {
    return steps;
  }

  public void setSteps(List<PipelineStep> steps) {
    this.steps = steps;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PipelinePhase pipelinePhase = (PipelinePhase) o;
    return Objects.equals(this.name, pipelinePhase.name) &&
        Objects.equals(this.type, pipelinePhase.type) &&
        Objects.equals(this.repositoryId, pipelinePhase.repositoryId) &&
        Objects.equals(this.branch, pipelinePhase.branch) &&
        Objects.equals(this.environmentId, pipelinePhase.environmentId) &&
        Objects.equals(this.environmentType, pipelinePhase.environmentType) &&
        Objects.equals(this.steps, pipelinePhase.steps);
  }

  @Override
  public int hashCode() {
    return Objects.hash(name, type, repositoryId, branch, environmentId, environmentType, steps);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PipelinePhase {\n");
    
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    repositoryId: ").append(toIndentedString(repositoryId)).append("\n");
    sb.append("    branch: ").append(toIndentedString(branch)).append("\n");
    sb.append("    environmentId: ").append(toIndentedString(environmentId)).append("\n");
    sb.append("    environmentType: ").append(toIndentedString(environmentType)).append("\n");
    sb.append("    steps: ").append(toIndentedString(steps)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
