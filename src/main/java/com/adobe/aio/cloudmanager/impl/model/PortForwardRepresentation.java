/*
 * Cloud Manager API
 * This API allows access to Cloud Manager programs, pipelines, and environments by an authorized technical account created through the Adobe I/O Console. The base url for this API is https://cloudmanager.adobe.io, e.g. to get the list of programs for an organization, you would make a GET request to https://cloudmanager.adobe.io/api/programs (with the correct set of headers as described below). This swagger file can be downloaded from https://raw.githubusercontent.com/AdobeDocs/cloudmanager-api-docs/main/swagger-specs/api.yaml.
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.adobe.aio.cloudmanager.impl.model;

/*-
 * #%L
 * Adobe Cloud Manager Client Library
 * %%
 * Copyright (C) 2020 - 2022 Adobe Inc.
 * %%
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * #L%
 */

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.Serializable;
/**
 * PortForwardRepresentation
 */


public class PortForwardRepresentation implements Serializable{
  private static final long serialVersionUID = 1L;
  @JsonProperty("name")
  private String name = null;

  @JsonProperty("portDest")
  private Integer portDest = null;

  @JsonProperty("portOrig")
  private Integer portOrig = null;

  public PortForwardRepresentation name(String name) {
    this.name = name;
    return this;
  }

   /**
   * Destination host
   * @return name
  **/
  @Schema(example = "smtp.example.com", description = "Destination host")
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }

  public PortForwardRepresentation portDest(Integer portDest) {
    this.portDest = portDest;
    return this;
  }

   /**
   * Destination port
   * maximum: 65535
   * @return portDest
  **/
  @Schema(example = "443", required = true, description = "Destination port")
  public Integer getPortDest() {
    return portDest;
  }

  public void setPortDest(Integer portDest) {
    this.portDest = portDest;
  }

  public PortForwardRepresentation portOrig(Integer portOrig) {
    this.portOrig = portOrig;
    return this;
  }

   /**
   * Origin port for tunnel. Must be unique and in 30000-31000 range.
   * minimum: 30000
   * maximum: 31000
   * @return portOrig
  **/
  @Schema(example = "30710", required = true, description = "Origin port for tunnel. Must be unique and in 30000-31000 range.")
  public Integer getPortOrig() {
    return portOrig;
  }

  public void setPortOrig(Integer portOrig) {
    this.portOrig = portOrig;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PortForwardRepresentation portForwardRepresentation = (PortForwardRepresentation) o;
    return Objects.equals(this.name, portForwardRepresentation.name) &&
        Objects.equals(this.portDest, portForwardRepresentation.portDest) &&
        Objects.equals(this.portOrig, portForwardRepresentation.portOrig);
  }

  @Override
  public int hashCode() {
    return Objects.hash(name, portDest, portOrig);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PortForwardRepresentation {\n");
    
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    portDest: ").append(toIndentedString(portDest)).append("\n");
    sb.append("    portOrig: ").append(toIndentedString(portOrig)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
