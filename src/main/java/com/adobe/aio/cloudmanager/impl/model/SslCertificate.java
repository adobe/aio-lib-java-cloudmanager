/*
 * Cloud Manager API
 * This API allows access to Cloud Manager programs, pipelines, and environments by an authorized technical account created through the Adobe I/O Console. The base url for this API is https://cloudmanager.adobe.io, e.g. to get the list of programs for an organization, you would make a GET request to https://cloudmanager.adobe.io/api/programs (with the correct set of headers as described below). This swagger file can be downloaded from https://raw.githubusercontent.com/AdobeDocs/cloudmanager-api-docs/master/swagger-specs/api.yaml.
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.adobe.aio.cloudmanager.impl.model;

/*-
 * #%L
 * Adobe Cloud Manager Client Library
 * %%
 * Copyright (C) 2020 - 2022 Adobe Inc.
 * %%
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * #L%
 */

import java.io.Serializable;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.List;
import java.util.Objects;

import com.fasterxml.jackson.annotation.JsonProperty;
import io.swagger.v3.oas.annotations.media.Schema;
/**
 * Describes an SSL Certificate
 */
@Schema(description = "Describes an SSL Certificate")

public class SslCertificate implements Serializable{
  private static final long serialVersionUID = 1L;
  @JsonProperty("id")
  private String id = null;

  @JsonProperty("programId")
  private String programId = null;

  @JsonProperty("serialNumber")
  private String serialNumber = null;

  @JsonProperty("name")
  private String name = null;

  @JsonProperty("issuer")
  private String issuer = null;

  @JsonProperty("expireAt")
  private OffsetDateTime expireAt = null;

  @JsonProperty("commonName")
  private String commonName = null;

  @JsonProperty("subjectAlternativeNames")
  private List<String> subjectAlternativeNames = null;

  @JsonProperty("attachedDomainNames")
  private List<String> attachedDomainNames = null;

  @JsonProperty("attachedEnvironmentNames")
  private List<String> attachedEnvironmentNames = null;

  @JsonProperty("createdAt")
  private OffsetDateTime createdAt = null;

  @JsonProperty("updatedAt")
  private OffsetDateTime updatedAt = null;

  @JsonProperty("_links")
  private EmbeddedProgramLinks _links = null;

  public SslCertificate id(String id) {
    this.id = id;
    return this;
  }

   /**
   * id
   * @return id
  **/
  @Schema(description = "id")
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }

  public SslCertificate programId(String programId) {
    this.programId = programId;
    return this;
  }

   /**
   * Identifier of the application. Unique within the space.
   * @return programId
  **/
  @Schema(example = "14", description = "Identifier of the application. Unique within the space.")
  public String getProgramId() {
    return programId;
  }

  public void setProgramId(String programId) {
    this.programId = programId;
  }

  public SslCertificate serialNumber(String serialNumber) {
    this.serialNumber = serialNumber;
    return this;
  }

   /**
   * Unique identifier of the certificate at CA level.
   * @return serialNumber
  **/
  @Schema(description = "Unique identifier of the certificate at CA level.")
  public String getSerialNumber() {
    return serialNumber;
  }

  public void setSerialNumber(String serialNumber) {
    this.serialNumber = serialNumber;
  }

  public SslCertificate name(String name) {
    this.name = name;
    return this;
  }

   /**
   * Name of the SSL Certificate.
   * @return name
  **/
  @Schema(example = "Certificate Name Example", description = "Name of the SSL Certificate.")
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }

  public SslCertificate issuer(String issuer) {
    this.issuer = issuer;
    return this;
  }

   /**
   * Issuer of the SSL Certificate.
   * @return issuer
  **/
  @Schema(description = "Issuer of the SSL Certificate.")
  public String getIssuer() {
    return issuer;
  }

  public void setIssuer(String issuer) {
    this.issuer = issuer;
  }

  public SslCertificate expireAt(OffsetDateTime expireAt) {
    this.expireAt = expireAt;
    return this;
  }

   /**
   * Expiration date of the SSL Certificate.
   * @return expireAt
  **/
  @Schema(description = "Expiration date of the SSL Certificate.")
  public OffsetDateTime getExpireAt() {
    return expireAt;
  }

  public void setExpireAt(OffsetDateTime expireAt) {
    this.expireAt = expireAt;
  }

  public SslCertificate commonName(String commonName) {
    this.commonName = commonName;
    return this;
  }

   /**
   * Common name of the SSL Certificate.
   * @return commonName
  **/
  @Schema(description = "Common name of the SSL Certificate.")
  public String getCommonName() {
    return commonName;
  }

  public void setCommonName(String commonName) {
    this.commonName = commonName;
  }

  public SslCertificate subjectAlternativeNames(List<String> subjectAlternativeNames) {
    this.subjectAlternativeNames = subjectAlternativeNames;
    return this;
  }

  public SslCertificate addSubjectAlternativeNamesItem(String subjectAlternativeNamesItem) {
    if (this.subjectAlternativeNames == null) {
      this.subjectAlternativeNames = new ArrayList<>();
    }
    this.subjectAlternativeNames.add(subjectAlternativeNamesItem);
    return this;
  }

   /**
   * Subject alternative names of the SSL Certificate.
   * @return subjectAlternativeNames
  **/
  @Schema(description = "Subject alternative names of the SSL Certificate.")
  public List<String> getSubjectAlternativeNames() {
    return subjectAlternativeNames;
  }

  public void setSubjectAlternativeNames(List<String> subjectAlternativeNames) {
    this.subjectAlternativeNames = subjectAlternativeNames;
  }

  public SslCertificate attachedDomainNames(List<String> attachedDomainNames) {
    this.attachedDomainNames = attachedDomainNames;
    return this;
  }

  public SslCertificate addAttachedDomainNamesItem(String attachedDomainNamesItem) {
    if (this.attachedDomainNames == null) {
      this.attachedDomainNames = new ArrayList<>();
    }
    this.attachedDomainNames.add(attachedDomainNamesItem);
    return this;
  }

   /**
   * Attached domain names
   * @return attachedDomainNames
  **/
  @Schema(description = "Attached domain names")
  public List<String> getAttachedDomainNames() {
    return attachedDomainNames;
  }

  public void setAttachedDomainNames(List<String> attachedDomainNames) {
    this.attachedDomainNames = attachedDomainNames;
  }

  public SslCertificate attachedEnvironmentNames(List<String> attachedEnvironmentNames) {
    this.attachedEnvironmentNames = attachedEnvironmentNames;
    return this;
  }

  public SslCertificate addAttachedEnvironmentNamesItem(String attachedEnvironmentNamesItem) {
    if (this.attachedEnvironmentNames == null) {
      this.attachedEnvironmentNames = new ArrayList<>();
    }
    this.attachedEnvironmentNames.add(attachedEnvironmentNamesItem);
    return this;
  }

   /**
   * Attached environment names
   * @return attachedEnvironmentNames
  **/
  @Schema(description = "Attached environment names")
  public List<String> getAttachedEnvironmentNames() {
    return attachedEnvironmentNames;
  }

  public void setAttachedEnvironmentNames(List<String> attachedEnvironmentNames) {
    this.attachedEnvironmentNames = attachedEnvironmentNames;
  }

  public SslCertificate createdAt(OffsetDateTime createdAt) {
    this.createdAt = createdAt;
    return this;
  }

   /**
   * Date of SSL Certificate submission.
   * @return createdAt
  **/
  @Schema(description = "Date of SSL Certificate submission.")
  public OffsetDateTime getCreatedAt() {
    return createdAt;
  }

  public void setCreatedAt(OffsetDateTime createdAt) {
    this.createdAt = createdAt;
  }

  public SslCertificate updatedAt(OffsetDateTime updatedAt) {
    this.updatedAt = updatedAt;
    return this;
  }

   /**
   * Date of last SSL Certificate update.
   * @return updatedAt
  **/
  @Schema(description = "Date of last SSL Certificate update.")
  public OffsetDateTime getUpdatedAt() {
    return updatedAt;
  }

  public void setUpdatedAt(OffsetDateTime updatedAt) {
    this.updatedAt = updatedAt;
  }

  public SslCertificate _links(EmbeddedProgramLinks _links) {
    this._links = _links;
    return this;
  }

   /**
   * Get _links
   * @return _links
  **/
  @Schema(description = "")
  public EmbeddedProgramLinks getLinks() {
    return _links;
  }

  public void setLinks(EmbeddedProgramLinks _links) {
    this._links = _links;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SslCertificate sslCertificate = (SslCertificate) o;
    return Objects.equals(this.id, sslCertificate.id) &&
        Objects.equals(this.programId, sslCertificate.programId) &&
        Objects.equals(this.serialNumber, sslCertificate.serialNumber) &&
        Objects.equals(this.name, sslCertificate.name) &&
        Objects.equals(this.issuer, sslCertificate.issuer) &&
        Objects.equals(this.expireAt, sslCertificate.expireAt) &&
        Objects.equals(this.commonName, sslCertificate.commonName) &&
        Objects.equals(this.subjectAlternativeNames, sslCertificate.subjectAlternativeNames) &&
        Objects.equals(this.attachedDomainNames, sslCertificate.attachedDomainNames) &&
        Objects.equals(this.attachedEnvironmentNames, sslCertificate.attachedEnvironmentNames) &&
        Objects.equals(this.createdAt, sslCertificate.createdAt) &&
        Objects.equals(this.updatedAt, sslCertificate.updatedAt) &&
        Objects.equals(this._links, sslCertificate._links);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, programId, serialNumber, name, issuer, expireAt, commonName, subjectAlternativeNames, attachedDomainNames, attachedEnvironmentNames, createdAt, updatedAt, _links);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SslCertificate {\n");
    
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    programId: ").append(toIndentedString(programId)).append("\n");
    sb.append("    serialNumber: ").append(toIndentedString(serialNumber)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    issuer: ").append(toIndentedString(issuer)).append("\n");
    sb.append("    expireAt: ").append(toIndentedString(expireAt)).append("\n");
    sb.append("    commonName: ").append(toIndentedString(commonName)).append("\n");
    sb.append("    subjectAlternativeNames: ").append(toIndentedString(subjectAlternativeNames)).append("\n");
    sb.append("    attachedDomainNames: ").append(toIndentedString(attachedDomainNames)).append("\n");
    sb.append("    attachedEnvironmentNames: ").append(toIndentedString(attachedEnvironmentNames)).append("\n");
    sb.append("    createdAt: ").append(toIndentedString(createdAt)).append("\n");
    sb.append("    updatedAt: ").append(toIndentedString(updatedAt)).append("\n");
    sb.append("    _links: ").append(toIndentedString(_links)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
