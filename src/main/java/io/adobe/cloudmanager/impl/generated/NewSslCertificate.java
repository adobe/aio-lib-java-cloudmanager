/*
 * Cloud Manager API
 * This API allows access to Cloud Manager programs, pipelines, and environments by an authorized technical account created through the Adobe I/O Console. The base url for this API is https://cloudmanager.adobe.io, e.g. to get the list of programs for an organization, you would make a GET request to https://cloudmanager.adobe.io/api/programs (with the correct set of headers as described below). This swagger file can be downloaded from https://raw.githubusercontent.com/AdobeDocs/cloudmanager-api-docs/main/swagger-specs/api.yaml.
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.adobe.cloudmanager.impl.generated;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.v3.oas.annotations.media.Schema;
import java.util.ArrayList;
import java.util.List;
import java.io.Serializable;
/**
 * NewSslCertificate
 */



public class NewSslCertificate implements Serializable{
  private static final long serialVersionUID = 1L;
  @JsonProperty("name")
  private String name = null;

  @JsonProperty("certifcate")
  private String certifcate = null;

  @JsonProperty("privateKey")
  private String privateKey = null;

  @JsonProperty("chain")
  private List<String> chain = new ArrayList<>();

  public NewSslCertificate name(String name) {
    this.name = name;
    return this;
  }

   /**
   * The name of the new SSL Certificate.
   * @return name
  **/
  @Schema(required = true, description = "The name of the new SSL Certificate.")
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }

  public NewSslCertificate certifcate(String certifcate) {
    this.certifcate = certifcate;
    return this;
  }

   /**
   * The PEM-encoded certificate.
   * @return certifcate
  **/
  @Schema(description = "The PEM-encoded certificate.")
  public String getCertifcate() {
    return certifcate;
  }

  public void setCertifcate(String certifcate) {
    this.certifcate = certifcate;
  }

  public NewSslCertificate privateKey(String privateKey) {
    this.privateKey = privateKey;
    return this;
  }

   /**
   * The PEM-encoded private key.
   * @return privateKey
  **/
  @Schema(required = true, description = "The PEM-encoded private key.")
  public String getPrivateKey() {
    return privateKey;
  }

  public void setPrivateKey(String privateKey) {
    this.privateKey = privateKey;
  }

  public NewSslCertificate chain(List<String> chain) {
    this.chain = chain;
    return this;
  }

  public NewSslCertificate addChainItem(String chainItem) {
    this.chain.add(chainItem);
    return this;
  }

   /**
   * The PEM-encoded certificate chain.
   * @return chain
  **/
  @Schema(required = true, description = "The PEM-encoded certificate chain.")
  public List<String> getChain() {
    return chain;
  }

  public void setChain(List<String> chain) {
    this.chain = chain;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    NewSslCertificate newSslCertificate = (NewSslCertificate) o;
    return Objects.equals(this.name, newSslCertificate.name) &&
        Objects.equals(this.certifcate, newSslCertificate.certifcate) &&
        Objects.equals(this.privateKey, newSslCertificate.privateKey) &&
        Objects.equals(this.chain, newSslCertificate.chain);
  }

  @Override
  public int hashCode() {
    return Objects.hash(name, certifcate, privateKey, chain);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class NewSslCertificate {\n");
    
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    certifcate: ").append(toIndentedString(certifcate)).append("\n");
    sb.append("    privateKey: ").append(toIndentedString(privateKey)).append("\n");
    sb.append("    chain: ").append(toIndentedString(chain)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
