/*
 * Cloud Manager API
 * This API allows access to Cloud Manager programs, pipelines, and environments by an authorized technical account created through the Adobe I/O Console. The base url for this API is https://cloudmanager.adobe.io, e.g. to get the list of programs for an organization, you would make a GET request to https://cloudmanager.adobe.io/api/programs (with the correct set of headers as described below). This swagger file can be downloaded from https://raw.githubusercontent.com/AdobeDocs/cloudmanager-api-docs/main/swagger-specs/api.yaml.
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.adobe.cloudmanager.impl.generated;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;
import io.adobe.cloudmanager.impl.generated.PipelineLinks;
import io.adobe.cloudmanager.impl.generated.PipelinePhase;
import io.swagger.v3.oas.annotations.media.Schema;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.List;
import java.io.Serializable;
/**
 * A representation of a CI/CD Pipeline
 */
@Schema(description = "A representation of a CI/CD Pipeline")


public class Pipeline implements Serializable{
  private static final long serialVersionUID = 1L;
  @JsonProperty("id")
  private String id = null;

  @JsonProperty("programId")
  private String programId = null;

  @JsonProperty("name")
  private String name = null;

  /**
   * How should the execution be triggered. ON_COMMIT: each time one or more commits are pushed and the Pipeline is idle then a execution is triggered. MANUAL: triggerd through UI or API.
   */
  public enum TriggerEnum {
    ON_COMMIT("ON_COMMIT"),
    MANUAL("MANUAL");

    private String value;

    TriggerEnum(String value) {
      this.value = value;
    }
    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    @JsonCreator
    public static TriggerEnum fromValue(String input) {
      for (TriggerEnum b : TriggerEnum.values()) {
        if (b.value.equals(input)) {
          return b;
        }
      }
      return null;
    }

  }  @JsonProperty("trigger")
  private TriggerEnum trigger = null;

  /**
   * Pipeline status
   */
  public enum StatusEnum {
    IDLE("IDLE"),
    BUSY("BUSY"),
    WAITING("WAITING");

    private String value;

    StatusEnum(String value) {
      this.value = value;
    }
    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    @JsonCreator
    public static StatusEnum fromValue(String input) {
      for (StatusEnum b : StatusEnum.values()) {
        if (b.value.equals(input)) {
          return b;
        }
      }
      return null;
    }

  }  @JsonProperty("status")
  private StatusEnum status = null;

  @JsonProperty("createdAt")
  private OffsetDateTime createdAt = null;

  @JsonProperty("updatedAt")
  private OffsetDateTime updatedAt = null;

  @JsonProperty("lastStartedAt")
  private OffsetDateTime lastStartedAt = null;

  @JsonProperty("lastFinishedAt")
  private OffsetDateTime lastFinishedAt = null;

  @JsonProperty("phases")
  private List<PipelinePhase> phases = new ArrayList<>();

  /**
   * Pipeline type
   */
  public enum TypeEnum {
    CI_CD("CI_CD"),
    CODE_GENERATOR("CODE_GENERATOR");

    private String value;

    TypeEnum(String value) {
      this.value = value;
    }
    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    @JsonCreator
    public static TypeEnum fromValue(String input) {
      for (TypeEnum b : TypeEnum.values()) {
        if (b.value.equals(input)) {
          return b;
        }
      }
      return null;
    }

  }  @JsonProperty("type")
  private TypeEnum type = null;

  @JsonProperty("_links")
  private PipelineLinks _links = null;

  public Pipeline id(String id) {
    this.id = id;
    return this;
  }

   /**
   * Identifier of the pipeline. Unique within the program.
   * @return id
  **/
  @Schema(example = "29", description = "Identifier of the pipeline. Unique within the program.")
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }

  public Pipeline programId(String programId) {
    this.programId = programId;
    return this;
  }

   /**
   * Identifier of the program. Unique within the space.
   * @return programId
  **/
  @Schema(example = "14", description = "Identifier of the program. Unique within the space.")
  public String getProgramId() {
    return programId;
  }

  public void setProgramId(String programId) {
    this.programId = programId;
  }

  public Pipeline name(String name) {
    this.name = name;
    return this;
  }

   /**
   * Name of the pipeline
   * @return name
  **/
  @Schema(example = "AcmeCorp Main Pipeline", required = true, description = "Name of the pipeline")
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }

  public Pipeline trigger(TriggerEnum trigger) {
    this.trigger = trigger;
    return this;
  }

   /**
   * How should the execution be triggered. ON_COMMIT: each time one or more commits are pushed and the Pipeline is idle then a execution is triggered. MANUAL: triggerd through UI or API.
   * @return trigger
  **/
  @Schema(example = "MANUAL", description = "How should the execution be triggered. ON_COMMIT: each time one or more commits are pushed and the Pipeline is idle then a execution is triggered. MANUAL: triggerd through UI or API.")
  public TriggerEnum getTrigger() {
    return trigger;
  }

  public void setTrigger(TriggerEnum trigger) {
    this.trigger = trigger;
  }

  public Pipeline status(StatusEnum status) {
    this.status = status;
    return this;
  }

   /**
   * Pipeline status
   * @return status
  **/
  @Schema(example = "IDLE", description = "Pipeline status")
  public StatusEnum getStatus() {
    return status;
  }

  public void setStatus(StatusEnum status) {
    this.status = status;
  }

   /**
   * Create date
   * @return createdAt
  **/
  @Schema(description = "Create date")
  public OffsetDateTime getCreatedAt() {
    return createdAt;
  }

   /**
   * Update date
   * @return updatedAt
  **/
  @Schema(description = "Update date")
  public OffsetDateTime getUpdatedAt() {
    return updatedAt;
  }

   /**
   * Last pipeline execution start
   * @return lastStartedAt
  **/
  @Schema(description = "Last pipeline execution start")
  public OffsetDateTime getLastStartedAt() {
    return lastStartedAt;
  }

   /**
   * Last pipeline execution end
   * @return lastFinishedAt
  **/
  @Schema(description = "Last pipeline execution end")
  public OffsetDateTime getLastFinishedAt() {
    return lastFinishedAt;
  }

  public Pipeline phases(List<PipelinePhase> phases) {
    this.phases = phases;
    return this;
  }

  public Pipeline addPhasesItem(PipelinePhase phasesItem) {
    this.phases.add(phasesItem);
    return this;
  }

   /**
   * Pipeline phases in execution order
   * @return phases
  **/
  @Schema(required = true, description = "Pipeline phases in execution order")
  public List<PipelinePhase> getPhases() {
    return phases;
  }

  public void setPhases(List<PipelinePhase> phases) {
    this.phases = phases;
  }

  public Pipeline type(TypeEnum type) {
    this.type = type;
    return this;
  }

   /**
   * Pipeline type
   * @return type
  **/
  @Schema(example = "CI_CD", description = "Pipeline type")
  public TypeEnum getType() {
    return type;
  }

  public void setType(TypeEnum type) {
    this.type = type;
  }

  public Pipeline _links(PipelineLinks _links) {
    this._links = _links;
    return this;
  }

   /**
   * Get _links
   * @return _links
  **/
  @Schema(description = "")
  public PipelineLinks getLinks() {
    return _links;
  }

  public void setLinks(PipelineLinks _links) {
    this._links = _links;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Pipeline pipeline = (Pipeline) o;
    return Objects.equals(this.id, pipeline.id) &&
        Objects.equals(this.programId, pipeline.programId) &&
        Objects.equals(this.name, pipeline.name) &&
        Objects.equals(this.trigger, pipeline.trigger) &&
        Objects.equals(this.status, pipeline.status) &&
        Objects.equals(this.createdAt, pipeline.createdAt) &&
        Objects.equals(this.updatedAt, pipeline.updatedAt) &&
        Objects.equals(this.lastStartedAt, pipeline.lastStartedAt) &&
        Objects.equals(this.lastFinishedAt, pipeline.lastFinishedAt) &&
        Objects.equals(this.phases, pipeline.phases) &&
        Objects.equals(this.type, pipeline.type) &&
        Objects.equals(this._links, pipeline._links);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, programId, name, trigger, status, createdAt, updatedAt, lastStartedAt, lastFinishedAt, phases, type, _links);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Pipeline {\n");
    
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    programId: ").append(toIndentedString(programId)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    trigger: ").append(toIndentedString(trigger)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    createdAt: ").append(toIndentedString(createdAt)).append("\n");
    sb.append("    updatedAt: ").append(toIndentedString(updatedAt)).append("\n");
    sb.append("    lastStartedAt: ").append(toIndentedString(lastStartedAt)).append("\n");
    sb.append("    lastFinishedAt: ").append(toIndentedString(lastFinishedAt)).append("\n");
    sb.append("    phases: ").append(toIndentedString(phases)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    _links: ").append(toIndentedString(_links)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
