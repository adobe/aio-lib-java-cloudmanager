/*
 * Cloud Manager API
 * This API allows access to Cloud Manager programs, pipelines, and environments by an authorized technical account created through the Adobe I/O Console. The base url for this API is https://cloudmanager.adobe.io, e.g. to get the list of programs for an organization, you would make a GET request to https://cloudmanager.adobe.io/api/programs (with the correct set of headers as described below). This swagger file can be downloaded from https://raw.githubusercontent.com/AdobeDocs/cloudmanager-api-docs/main/swagger-specs/api.yaml.
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.adobe.cloudmanager.impl.generated;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;
import io.adobe.cloudmanager.impl.generated.PipelineExecutionStepStateDetails;
import io.adobe.cloudmanager.impl.generated.PipelineExecutionStepStateLinks;
import io.swagger.v3.oas.annotations.media.Schema;
import java.time.OffsetDateTime;
import java.io.Serializable;
/**
 * Describes the status of a particular pipeline execution step for display purposes
 */
@Schema(description = "Describes the status of a particular pipeline execution step for display purposes")


public class PipelineExecutionStepState implements Serializable{
  private static final long serialVersionUID = 1L;
  @JsonProperty("id")
  private String id = null;

  @JsonProperty("stepId")
  private String stepId = null;

  @JsonProperty("phaseId")
  private String phaseId = null;

  @JsonProperty("action")
  private String action = null;

  @JsonProperty("repository")
  private String repository = null;

  @JsonProperty("branch")
  private String branch = null;

  @JsonProperty("environment")
  private String environment = null;

  @JsonProperty("environmentId")
  private String environmentId = null;

  @JsonProperty("environmentType")
  private String environmentType = null;

  @JsonProperty("startedAt")
  private OffsetDateTime startedAt = null;

  @JsonProperty("finishedAt")
  private OffsetDateTime finishedAt = null;

  @JsonProperty("commitId")
  private String commitId = null;

  @JsonProperty("details")
  private PipelineExecutionStepStateDetails details = null;

  /**
   * Action status
   */
  public enum StatusEnum {
    NOT_STARTED("NOT_STARTED"),
    RUNNING("RUNNING"),
    FINISHED("FINISHED"),
    ERROR("ERROR"),
    ROLLING_BACK("ROLLING_BACK"),
    ROLLED_BACK("ROLLED_BACK"),
    WAITING("WAITING"),
    CANCELLED("CANCELLED"),
    FAILED("FAILED"),
    INCOMPLETE("INCOMPLETE");

    private String value;

    StatusEnum(String value) {
      this.value = value;
    }
    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    @JsonCreator
    public static StatusEnum fromValue(String input) {
      for (StatusEnum b : StatusEnum.values()) {
        if (b.value.equals(input)) {
          return b;
        }
      }
      return null;
    }

  }  @JsonProperty("status")
  private StatusEnum status = null;

  @JsonProperty("_links")
  private PipelineExecutionStepStateLinks _links = null;

  public PipelineExecutionStepState id(String id) {
    this.id = id;
    return this;
  }

   /**
   * Get id
   * @return id
  **/
  @Schema(description = "")
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }

  public PipelineExecutionStepState stepId(String stepId) {
    this.stepId = stepId;
    return this;
  }

   /**
   * Get stepId
   * @return stepId
  **/
  @Schema(description = "")
  public String getStepId() {
    return stepId;
  }

  public void setStepId(String stepId) {
    this.stepId = stepId;
  }

  public PipelineExecutionStepState phaseId(String phaseId) {
    this.phaseId = phaseId;
    return this;
  }

   /**
   * Get phaseId
   * @return phaseId
  **/
  @Schema(description = "")
  public String getPhaseId() {
    return phaseId;
  }

  public void setPhaseId(String phaseId) {
    this.phaseId = phaseId;
  }

  public PipelineExecutionStepState action(String action) {
    this.action = action;
    return this;
  }

   /**
   * Name of the action
   * @return action
  **/
  @Schema(example = "build", description = "Name of the action")
  public String getAction() {
    return action;
  }

  public void setAction(String action) {
    this.action = action;
  }

  public PipelineExecutionStepState repository(String repository) {
    this.repository = repository;
    return this;
  }

   /**
   * Target repository
   * @return repository
  **/
  @Schema(description = "Target repository")
  public String getRepository() {
    return repository;
  }

  public void setRepository(String repository) {
    this.repository = repository;
  }

  public PipelineExecutionStepState branch(String branch) {
    this.branch = branch;
    return this;
  }

   /**
   * Target branch
   * @return branch
  **/
  @Schema(description = "Target branch")
  public String getBranch() {
    return branch;
  }

  public void setBranch(String branch) {
    this.branch = branch;
  }

  public PipelineExecutionStepState environment(String environment) {
    this.environment = environment;
    return this;
  }

   /**
   * Target environment
   * @return environment
  **/
  @Schema(description = "Target environment")
  public String getEnvironment() {
    return environment;
  }

  public void setEnvironment(String environment) {
    this.environment = environment;
  }

  public PipelineExecutionStepState environmentId(String environmentId) {
    this.environmentId = environmentId;
    return this;
  }

   /**
   * Target environment id
   * @return environmentId
  **/
  @Schema(description = "Target environment id")
  public String getEnvironmentId() {
    return environmentId;
  }

  public void setEnvironmentId(String environmentId) {
    this.environmentId = environmentId;
  }

  public PipelineExecutionStepState environmentType(String environmentType) {
    this.environmentType = environmentType;
    return this;
  }

   /**
   * Target environment type
   * @return environmentType
  **/
  @Schema(description = "Target environment type")
  public String getEnvironmentType() {
    return environmentType;
  }

  public void setEnvironmentType(String environmentType) {
    this.environmentType = environmentType;
  }

  public PipelineExecutionStepState startedAt(OffsetDateTime startedAt) {
    this.startedAt = startedAt;
    return this;
  }

   /**
   * Timestamp at which the step state started running
   * @return startedAt
  **/
  @Schema(description = "Timestamp at which the step state started running")
  public OffsetDateTime getStartedAt() {
    return startedAt;
  }

  public void setStartedAt(OffsetDateTime startedAt) {
    this.startedAt = startedAt;
  }

  public PipelineExecutionStepState finishedAt(OffsetDateTime finishedAt) {
    this.finishedAt = finishedAt;
    return this;
  }

   /**
   * Timestamp at which the step completed
   * @return finishedAt
  **/
  @Schema(description = "Timestamp at which the step completed")
  public OffsetDateTime getFinishedAt() {
    return finishedAt;
  }

  public void setFinishedAt(OffsetDateTime finishedAt) {
    this.finishedAt = finishedAt;
  }

  public PipelineExecutionStepState commitId(String commitId) {
    this.commitId = commitId;
    return this;
  }

   /**
   * Target commit id
   * @return commitId
  **/
  @Schema(description = "Target commit id")
  public String getCommitId() {
    return commitId;
  }

  public void setCommitId(String commitId) {
    this.commitId = commitId;
  }

  public PipelineExecutionStepState details(PipelineExecutionStepStateDetails details) {
    this.details = details;
    return this;
  }

   /**
   * Get details
   * @return details
  **/
  @Schema(description = "")
  public PipelineExecutionStepStateDetails getDetails() {
    return details;
  }

  public void setDetails(PipelineExecutionStepStateDetails details) {
    this.details = details;
  }

  public PipelineExecutionStepState status(StatusEnum status) {
    this.status = status;
    return this;
  }

   /**
   * Action status
   * @return status
  **/
  @Schema(example = "NOT_STARTED", description = "Action status")
  public StatusEnum getStatus() {
    return status;
  }

  public void setStatus(StatusEnum status) {
    this.status = status;
  }

  public PipelineExecutionStepState _links(PipelineExecutionStepStateLinks _links) {
    this._links = _links;
    return this;
  }

   /**
   * Get _links
   * @return _links
  **/
  @Schema(description = "")
  public PipelineExecutionStepStateLinks getLinks() {
    return _links;
  }

  public void setLinks(PipelineExecutionStepStateLinks _links) {
    this._links = _links;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PipelineExecutionStepState pipelineExecutionStepState = (PipelineExecutionStepState) o;
    return Objects.equals(this.id, pipelineExecutionStepState.id) &&
        Objects.equals(this.stepId, pipelineExecutionStepState.stepId) &&
        Objects.equals(this.phaseId, pipelineExecutionStepState.phaseId) &&
        Objects.equals(this.action, pipelineExecutionStepState.action) &&
        Objects.equals(this.repository, pipelineExecutionStepState.repository) &&
        Objects.equals(this.branch, pipelineExecutionStepState.branch) &&
        Objects.equals(this.environment, pipelineExecutionStepState.environment) &&
        Objects.equals(this.environmentId, pipelineExecutionStepState.environmentId) &&
        Objects.equals(this.environmentType, pipelineExecutionStepState.environmentType) &&
        Objects.equals(this.startedAt, pipelineExecutionStepState.startedAt) &&
        Objects.equals(this.finishedAt, pipelineExecutionStepState.finishedAt) &&
        Objects.equals(this.commitId, pipelineExecutionStepState.commitId) &&
        Objects.equals(this.details, pipelineExecutionStepState.details) &&
        Objects.equals(this.status, pipelineExecutionStepState.status) &&
        Objects.equals(this._links, pipelineExecutionStepState._links);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, stepId, phaseId, action, repository, branch, environment, environmentId, environmentType, startedAt, finishedAt, commitId, details, status, _links);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PipelineExecutionStepState {\n");
    
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    stepId: ").append(toIndentedString(stepId)).append("\n");
    sb.append("    phaseId: ").append(toIndentedString(phaseId)).append("\n");
    sb.append("    action: ").append(toIndentedString(action)).append("\n");
    sb.append("    repository: ").append(toIndentedString(repository)).append("\n");
    sb.append("    branch: ").append(toIndentedString(branch)).append("\n");
    sb.append("    environment: ").append(toIndentedString(environment)).append("\n");
    sb.append("    environmentId: ").append(toIndentedString(environmentId)).append("\n");
    sb.append("    environmentType: ").append(toIndentedString(environmentType)).append("\n");
    sb.append("    startedAt: ").append(toIndentedString(startedAt)).append("\n");
    sb.append("    finishedAt: ").append(toIndentedString(finishedAt)).append("\n");
    sb.append("    commitId: ").append(toIndentedString(commitId)).append("\n");
    sb.append("    details: ").append(toIndentedString(details)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    _links: ").append(toIndentedString(_links)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
