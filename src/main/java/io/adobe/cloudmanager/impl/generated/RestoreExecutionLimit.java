/*
 * Cloud Manager API
 * This API allows access to Cloud Manager programs, pipelines, and environments by an authorized technical account created through the Adobe I/O Console. The base url for this API is https://cloudmanager.adobe.io, e.g. to get the list of programs for an organization, you would make a GET request to https://cloudmanager.adobe.io/api/programs (with the correct set of headers as described below). This swagger file can be downloaded from https://raw.githubusercontent.com/AdobeDocs/cloudmanager-api-docs/main/swagger-specs/api.yaml.
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.adobe.cloudmanager.impl.generated;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.v3.oas.annotations.media.Schema;
import java.time.LocalDate;
import java.io.Serializable;
/**
 * RestoreExecutionLimit
 */



public class RestoreExecutionLimit implements Serializable{
  private static final long serialVersionUID = 1L;
  @JsonProperty("resetDate")
  private LocalDate resetDate = null;

  @JsonProperty("available")
  private Long available = null;

  @JsonProperty("max")
  private Long max = null;

  @JsonProperty("countInterval")
  private Long countInterval = null;

  public RestoreExecutionLimit resetDate(LocalDate resetDate) {
    this.resetDate = resetDate;
    return this;
  }

   /**
   * Reset date
   * @return resetDate
  **/
  @Schema(description = "Reset date")
  public LocalDate getResetDate() {
    return resetDate;
  }

  public void setResetDate(LocalDate resetDate) {
    this.resetDate = resetDate;
  }

  public RestoreExecutionLimit available(Long available) {
    this.available = available;
    return this;
  }

   /**
   * Available runs until reset
   * @return available
  **/
  @Schema(description = "Available runs until reset")
  public Long getAvailable() {
    return available;
  }

  public void setAvailable(Long available) {
    this.available = available;
  }

  public RestoreExecutionLimit max(Long max) {
    this.max = max;
    return this;
  }

   /**
   * Max runs per interval
   * @return max
  **/
  @Schema(description = "Max runs per interval")
  public Long getMax() {
    return max;
  }

  public void setMax(Long max) {
    this.max = max;
  }

  public RestoreExecutionLimit countInterval(Long countInterval) {
    this.countInterval = countInterval;
    return this;
  }

   /**
   * Rolling window used to count the available runs
   * @return countInterval
  **/
  @Schema(description = "Rolling window used to count the available runs")
  public Long getCountInterval() {
    return countInterval;
  }

  public void setCountInterval(Long countInterval) {
    this.countInterval = countInterval;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    RestoreExecutionLimit restoreExecutionLimit = (RestoreExecutionLimit) o;
    return Objects.equals(this.resetDate, restoreExecutionLimit.resetDate) &&
        Objects.equals(this.available, restoreExecutionLimit.available) &&
        Objects.equals(this.max, restoreExecutionLimit.max) &&
        Objects.equals(this.countInterval, restoreExecutionLimit.countInterval);
  }

  @Override
  public int hashCode() {
    return Objects.hash(resetDate, available, max, countInterval);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class RestoreExecutionLimit {\n");
    
    sb.append("    resetDate: ").append(toIndentedString(resetDate)).append("\n");
    sb.append("    available: ").append(toIndentedString(available)).append("\n");
    sb.append("    max: ").append(toIndentedString(max)).append("\n");
    sb.append("    countInterval: ").append(toIndentedString(countInterval)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
