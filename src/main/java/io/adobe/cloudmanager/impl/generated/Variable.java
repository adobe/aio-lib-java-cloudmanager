/*
 * Cloud Manager API
 * This API allows access to Cloud Manager programs, pipelines, and environments by an authorized technical account created through the Adobe I/O Console. The base url for this API is https://cloudmanager.adobe.io, e.g. to get the list of programs for an organization, you would make a GET request to https://cloudmanager.adobe.io/api/programs (with the correct set of headers as described below). This swagger file can be downloaded from https://raw.githubusercontent.com/AdobeDocs/cloudmanager-api-docs/main/swagger-specs/api.yaml.
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.adobe.cloudmanager.impl.generated;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.Serializable;
/**
 * A named value than can be set on an Environment or Pipeline
 */
@Schema(description = "A named value than can be set on an Environment or Pipeline")


public class Variable implements Serializable{
  private static final long serialVersionUID = 1L;
  @JsonProperty("name")
  private String name = null;

  @JsonProperty("value")
  private String value = null;

  /**
   * Type of the variable. Default &#x60;string&#x60; if missing. &#x60;secretString&#x60; variables are encrypted at rest. The type of a variable be changed after creation; the variable must be deleted and recreated.
   */
  public enum TypeEnum {
    STRING("string"),
    SECRETSTRING("secretString");

    private String value;

    TypeEnum(String value) {
      this.value = value;
    }
    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    @JsonCreator
    public static TypeEnum fromValue(String input) {
      for (TypeEnum b : TypeEnum.values()) {
        if (b.value.equals(input)) {
          return b;
        }
      }
      return null;
    }

  }  @JsonProperty("type")
  private TypeEnum type = null;

  @JsonProperty("service")
  private String service = null;

  /**
   * Status of the variable
   */
  public enum StatusEnum {
    CREATING("creating"),
    READY("ready"),
    DELETING("deleting"),
    DELETED("deleted"),
    UPDATING("updating"),
    FAILED("failed"),
    DELETED_FAILED("deleted_failed");

    private String value;

    StatusEnum(String value) {
      this.value = value;
    }
    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    @JsonCreator
    public static StatusEnum fromValue(String input) {
      for (StatusEnum b : StatusEnum.values()) {
        if (b.value.equals(input)) {
          return b;
        }
      }
      return null;
    }

  }  @JsonProperty("status")
  private StatusEnum status = null;

  public Variable name(String name) {
    this.name = name;
    return this;
  }

   /**
   * Name of the variable. Can only consist of a-z, A-Z, _ and 0-9 and cannot begin with a number.
   * @return name
  **/
  @Schema(example = "MY_VAR1", description = "Name of the variable. Can only consist of a-z, A-Z, _ and 0-9 and cannot begin with a number.")
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }

  public Variable value(String value) {
    this.value = value;
    return this;
  }

   /**
   * Value of the variable. Read-Write for non-secrets, write-only for secrets. The length of &#x60;secretString&#x60; values must be less than 500 characters. An empty value causes a variable to be deleted.
   * @return value
  **/
  @Schema(example = "myValue", description = "Value of the variable. Read-Write for non-secrets, write-only for secrets. The length of `secretString` values must be less than 500 characters. An empty value causes a variable to be deleted.")
  public String getValue() {
    return value;
  }

  public void setValue(String value) {
    this.value = value;
  }

  public Variable type(TypeEnum type) {
    this.type = type;
    return this;
  }

   /**
   * Type of the variable. Default &#x60;string&#x60; if missing. &#x60;secretString&#x60; variables are encrypted at rest. The type of a variable be changed after creation; the variable must be deleted and recreated.
   * @return type
  **/
  @Schema(example = "string", description = "Type of the variable. Default `string` if missing. `secretString` variables are encrypted at rest. The type of a variable be changed after creation; the variable must be deleted and recreated.")
  public TypeEnum getType() {
    return type;
  }

  public void setType(TypeEnum type) {
    this.type = type;
  }

  public Variable service(String service) {
    this.service = service;
    return this;
  }

   /**
   * Service of the variable. When not provided, the variable applies to all services. Currently the values &#x27;author&#x27;, &#x27;publish&#x27;, and &#x27;preview&#x27; are supported. Note - this value is case-sensitive.
   * @return service
  **/
  @Schema(example = "author", description = "Service of the variable. When not provided, the variable applies to all services. Currently the values 'author', 'publish', and 'preview' are supported. Note - this value is case-sensitive.")
  public String getService() {
    return service;
  }

  public void setService(String service) {
    this.service = service;
  }

  public Variable status(StatusEnum status) {
    this.status = status;
    return this;
  }

   /**
   * Status of the variable
   * @return status
  **/
  @Schema(example = "ready", description = "Status of the variable")
  public StatusEnum getStatus() {
    return status;
  }

  public void setStatus(StatusEnum status) {
    this.status = status;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Variable variable = (Variable) o;
    return Objects.equals(this.name, variable.name) &&
        Objects.equals(this.value, variable.value) &&
        Objects.equals(this.type, variable.type) &&
        Objects.equals(this.service, variable.service) &&
        Objects.equals(this.status, variable.status);
  }

  @Override
  public int hashCode() {
    return Objects.hash(name, value, type, service, status);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Variable {\n");
    
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    value: ").append(toIndentedString(value)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    service: ").append(toIndentedString(service)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
